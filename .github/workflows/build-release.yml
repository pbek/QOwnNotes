name: Build and Release QOwnNotes

on:
  push:
    branches:
      - master
#      - develop
    tags-ignore:
      - '*'

defaults:
  run:
    working-directory: src

jobs:
  create_release:
    permissions:
      contents: write  # for actions/create-release to create a release
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Env
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          #export TAG=v${VERSION}.${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}
          export TAG=v${VERSION}
          export RELEASE_TEXT=$(grep -Pzo "## ${VERSION}\n(\n|.)+?\n##" ../CHANGELOG.md | sed '$ d')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV
          # add multiline release text
          echo "RELEASE_TEXT<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_TEXT}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Printenv
        run: |
          echo "VERSION=${VERSION}"
          echo "TAG=${TAG}"
          echo "RELEASE_TEXT=${RELEASE_TEXT}"
          printenv
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release v${{ env.VERSION }}
          body: ${{ env.RELEASE_TEXT }}
          draft: true
          prerelease: false

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Ubuntu 18.04 because of https://github.com/probonopd/linuxdeployqt/issues/340
        # Ubuntu 18.04 because of samuelmeuli/action-snapcraft
        os: [ubuntu-18.04, macos-latest, windows-latest]
        # Linux:   https://download.qt.io/online/qtsdkrepository/linux_x64/desktop/
        # macOS:   https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/
        # Windows: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/
        qt-version: ['5.15.2']
        app-image: [true, false]
        exclude:
          - os: windows-latest
            app-image: true
          - os: macos-latest
            app-image: true
#        exclude:
#          - os: ubuntu-18.04
#            qt-version: '5.13.2'
#          - os: ubuntu-18.04
#            qt-version: '5.13.2'
#          - os: macos-latest
#            qt-version: '5.13.2'
#          - os: windows-latest
#            qt-version: '5.15.2'
    steps:
    - uses: actions/checkout@v2	
      with:	
        submodules: true
    - name: Set Env
      shell: bash
      run: |
        export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    #
    # Install Snapcraft & Qt
    #

    - if: contains( matrix.os, 'ubuntu-18') && !matrix.app-image
      name: Install Snapcraft
      uses: samuelmeuli/action-snapcraft@v1
      with:
        use_lxd: true
        # `snapcraft export-login --snaps qownnotes --channels edge,stable -`, token valid for one year  
        snapcraft_token: ${{ secrets.SNAP_TOKEN_GH }}
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}
    # https://github.com/marketplace/actions/install-qt
    - if: contains( matrix.os, 'windows')
      name: Install Qt on Windows
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        arch: win64_mingw81
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - if: false == contains( matrix.os, 'windows')
      name: Install Qt on Linux/macOS
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Printenv
      shell: bash
      run: |
        echo "VERSION=${VERSION}"
        printenv

    #
    # Build QOwnNotes
    #

#    - name: Build
#      run: |
#        echo "#define RELEASE \"GitHub Action\"" > release.h
#        qmake
#        lrelease QOwnNotes.pro
#        make
    - if: contains( matrix.os, 'ubuntu-18') && !matrix.app-image
      name: Build for Snapcraft
      run: cd .. && sg lxd -c 'snapcraft --use-lxd' && ls

    - if: contains( matrix.os, 'ubuntu-18') && matrix.app-image
      name: Build for Linux
      run: |
        sudo apt install desktop-file-utils libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-composite0 libxcb-cursor0 libxcb-damage0 libxcb-dpms0 libxcb-dri2-0 libxcb-dri3-0 libxcb-ewmh2 libxcb-glx0 libxcb-present0 libxcb-randr0 libxcb-record0 libxcb-render0 libxcb-res0 libxcb-screensaver0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1
        echo "#define RELEASE \"AppImage\"" > release.h
        qmake PREFIX=/usr
        lrelease QOwnNotes.pro
        make -j 8
        # Create DEB
        #cd ../travis
        #dpkg-deb -x QOwnNotes.deb build
        #install ../src/QOwnNotes build/opt/QOwnNotes
        #mkdir -p build/usr/bin
        #ln -s /opt/QOwnNotes/QOwnNotes build/usr/bin
        #mv ../src/languages/*.qm build/opt/QOwnNotes/
        #mv ../icons/* build/opt/QOwnNotes/
        #sed -i 's/VERSION_NUMBER/'"${VERSION}"'/g' build/DEBIAN/control
        #dpkg -b build QOwnNotes.deb
        #cd ../src
        # Create AppImage (needs Ubuntu 18.04)
        make INSTALL_ROOT=appdir -j 8 install ; find appdir/
        mkdir -p appdir/usr/languages
        # mv tranlations to appdir (where QOwnNotes will find them)
        mv ./languages/*.qm appdir/usr/languages
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage
        # export VERSION=... # linuxdeployqt uses this for naming the file
        ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage -verbose=2
        mv "QOwnNotes-${VERSION}-x86_64.AppImage" QOwnNotes-x86_64.AppImage
        sha256sum QOwnNotes-x86_64.AppImage > QOwnNotes-x86_64.AppImage.sha256sum

    - if: contains( matrix.os, 'macos')
      name: Build for macOS
      run: |
        echo "#define RELEASE \"GitHub Actions\"" > release.h
        lrelease QOwnNotes.pro
        #ls ${Qt5_Dir}/bin
        qmake
        make -j 8
        ../build-systems/github/macos/create-dmg.sh

    - if: contains( matrix.os, 'windows')
      name: Build for Windows
      run: '& ..\build-systems\github\windows\build-zip.ps1'

    #
    # Release QOwnNotes
    #

#    - if: contains( matrix.os, 'ubuntu-18')
#      name: Release DEB package for Linux
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.create_release.outputs.upload_url }}
#        asset_path: ./travis/QOwnNotes.deb
#        asset_name: QOwnNotes.deb
#        asset_content_type: application/vnd.debian.binary-package
    - if: contains( matrix.os, 'ubuntu-18') && !matrix.app-image
      name: Release Snap for Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./qownnotes_${{ env.VERSION }}_amd64.snap
        asset_name: QOwnNotes-amd64.snap
        asset_content_type: application/octet-stream

    - if: contains( matrix.os, 'ubuntu-18') && !matrix.app-image
      name: Deploy Snap
      shell: bash
      run: |
        cd .. && ls
        if [ -n "$(ls *.snap 2>/dev/null)" ]; then
          sudo snapcraft upload *.snap --release stable
        fi

    - if: contains( matrix.os, 'ubuntu-18') && matrix.app-image
      name: Release AppImage for Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./src/QOwnNotes-x86_64.AppImage
        asset_name: QOwnNotes-x86_64.AppImage
        asset_content_type: application/vnd.appimage
    - if: contains( matrix.os, 'ubuntu-18') && matrix.app-image
      name: Release AppImage sha256sum for Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./src/QOwnNotes-x86_64.AppImage.sha256sum
        asset_name: QOwnNotes-x86_64.AppImage.sha256sum
        asset_content_type: text/plain

    - if: contains( matrix.os, 'macos')
      name: Release DMG for macOS
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./src/QOwnNotes.dmg
        asset_name: QOwnNotes.dmg
        asset_content_type: application/x-apple-diskimage

    - if: contains( matrix.os, 'windows')
      name: Upload ZIP for Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./QOwnNotes.zip
        asset_name: QOwnNotes.zip
        asset_content_type: application/zip
    - if: contains( matrix.os, 'windows')
      name: Upload sha256 sum for Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./QOwnNotes.zip.sha256
        asset_name: QOwnNotes.zip.sha256
        asset_content_type: text/plain

  publish_release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [create_release, build]
    steps:
    - name: Publish draft release
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.create_release.outputs.release_id }}
