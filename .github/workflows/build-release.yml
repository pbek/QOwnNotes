name: üì£ Build release of QOwnNotes

on:
  workflow_dispatch:
  push:
    branches:
      - release
    tags-ignore:
      - '*'

defaults:
  run:
    working-directory: src

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  EXECUTABLE: "QOwnNotes"
  APPLICATION: "QOwnNotes"
  UNIXNAME: "QOwnNotes"
  QMAKE_PROJECT: "QOwnNotes.pro"
  PUBLISHER: "Patrizio Bekerle"
  REPO_DIR: "/home/runner/work/QOwnNotes"
  QT_MODULES: ""
  QMAKE: qmake
  CORES: 16

jobs:
  create_release:
    name: 'üóÉÔ∏èÔ∏è Prepare release'
    permissions:
      contents: write  # for actions/create-release to create a release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Env
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          #export TAG=v${VERSION}.${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}
          export TAG=v${VERSION}
          export RELEASE_TEXT=$(grep -Pzo "## ${VERSION}\n(\n|.)+?\n##" ../CHANGELOG.md | sed '$ d')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV
          # add multiline release text
          echo "RELEASE_TEXT<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_TEXT}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Printenv
        run: |
          echo "VERSION=${VERSION}"
          echo "TAG=${TAG}"
          echo "RELEASE_TEXT=${RELEASE_TEXT}"
          printenv
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release v${{ env.VERSION }}
          body: ${{ env.RELEASE_TEXT }}
          # we want other build systems to immediately use this release after we uploaded the source archive
          draft: false
          prerelease: false

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

  #
  # AppImage build
  #
  build-appimage:
    needs: create_release
    runs-on: ubuntu-20.04
    env:
      QT_VERSION: 5.15.2
      BUILD_DIR: build
    name: 'üêß AppImage Qt 5.15.2'
    steps:

      - name: 'üß∞ Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: '‚öôÔ∏è Cache Qt'
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          modules: ${{env.QT_MODULES}}
          aqtversion: '==2.0.0'
          setup-python: false
          cache: ${{steps.cache-qt.outputs.cache-hit}}

      - name: '‚öôÔ∏è Install dependencies'
        run: |
          sudo apt-get update
          sudo apt install desktop-file-utils libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-composite0 libxcb-cursor0 libxcb-damage0 libxcb-dpms0 libxcb-dri2-0 libxcb-dri3-0 libxcb-ewmh2 libxcb-glx0 libxcb-present0 libxcb-randr0 libxcb-record0 libxcb-render0 libxcb-res0 libxcb-screensaver0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxkbcommon-x11-0
      - name: 'üöß Compile application'
        run: |
          echo "#define RELEASE \"AppImage\"" > release.h
          ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
          lrelease QOwnNotes.pro
          make -j${{env.CORES}}
      - name: '‚öôÔ∏è Install linuxdeploy'
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
      - name: 'üì¶ Create AppImage'
        run: |
          export QMAKE=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/bin/${{env.QMAKE}}
          export PATH=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/libexec:$PATH
          export EXTRA_QT_PLUGINS="svg;"
          cp ../icons/icon.png QOwnNotes.png
          ./linuxdeploy-x86_64.AppImage --appdir ${{env.BUILD_DIR}} -e ${{env.UNIXNAME}} -i ${{env.UNIXNAME}}.png -d PBE.QOwnNotes.desktop --plugin qt
          mkdir -p ${{env.BUILD_DIR}}/usr/languages && cp -r languages/*.qm ${{env.BUILD_DIR}}/usr/languages
          find ${{env.BUILD_DIR}}
          ./linuxdeploy-x86_64.AppImage --appdir ${{env.BUILD_DIR}} --output appimage
          rm linuxdeploy-x86_64.AppImage
          rm linuxdeploy-plugin-qt-x86_64.AppImage
          ls -hal *.AppImage
          find -iname "*.AppImage"
          mv *.AppImage ${{env.EXECUTABLE}}-x86_64.AppImage || true
          sha256sum ${{env.EXECUTABLE}}-x86_64.AppImage > ${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum
          ls -hal *.AppImage
          find -iname "*.AppImage"
          pwd

#      - name: 'üì§ Upload artifact: AppImage'
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{env.EXECUTABLE}}-x86_64.AppImage
#          path: src/${{env.EXECUTABLE}}-x86_64.AppImage
#      - name: 'üì§ Upload artifact: AppImage sha256sum'
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum
#          path: src/${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum
      - name: 'üì§ Release AppImage for Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./src/QOwnNotes-x86_64.AppImage
          asset_name: QOwnNotes-x86_64.AppImage
          asset_content_type: application/vnd.appimage
      - name: 'üì§ Release AppImage sha256sum'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./src/QOwnNotes-x86_64.AppImage.sha256sum
          asset_name: QOwnNotes-x86_64.AppImage.sha256sum
          asset_content_type: text/plain

  #
  # Snap build
  #
  build-snap:
    needs: create_release
    runs-on: ubuntu-latest
    env:
      QT_VERSION: 5.15.2
    name: 'üêß Snap Qt 5.15.2'
    steps:

      - name: 'üß∞ Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: '‚öôÔ∏è Set Env'
        shell: bash
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: '‚öôÔ∏è Cache Qt'
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          modules: ${{env.QT_MODULES}}
          cache: ${{steps.cache-qt.outputs.cache-hit}}

      - name: '‚öôÔ∏è Printenv'
        shell: bash
        run: |
          echo "VERSION=${VERSION}"
          printenv

      - name: 'üöß Compile application'
        uses: snapcore/action-build@v1
        id: snapcraft

      - name: 'üì§ Release Snap for Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./qownnotes_${{ env.VERSION }}_amd64.snap
          asset_name: QOwnNotes-amd64.snap
          asset_content_type: application/octet-stream

      - name: 'üì§ Deploy Snap'
        uses: snapcore/action-publish@v1
        continue-on-error: true
        env:
          # `snapcraft export-login --snaps=qownnotes --acls package_access,package_push,package_update,package_release -`, token valid for one year
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_TOKEN_GH }}
        with:
          snap: /home/runner/work/QOwnNotes/QOwnNotes/qownnotes_${{ env.VERSION }}_amd64.snap
          release: stable

#      - name: 'üì§ Upload artifact: Snap'
#        uses: actions/upload-artifact@v3
#        with:
#          name: qownnotes_${{ env.VERSION }}_amd64.snap
#          path: /home/runner/work/QOwnNotes/QOwnNotes/qownnotes_${{ env.VERSION }}_amd64.snap

  #
  # Windows build
  #
  build-windows:
    name: 'üßä Windows Qt 5.15.2'
    needs: create_release
    # https://github.com/pbek/QOwnNotes/issues/2558 error on windows-2022!
    runs-on: windows-2019
    env:
      QT_VERSION: 5.15.2
    continue-on-error: true
    steps:

      - name: 'üß∞ Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: '‚öôÔ∏è Cache Qt'
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==2.0.0'
          version: ${{env.QT_VERSION}}
          # https://aqtinstall.readthedocs.io/en/latest/getting_started.html
          # https://ddalcino.github.io/aqt-list-server/
          arch: win64_mingw81
          modules: ${{env.QT_MODULES}}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: '‚öôÔ∏è Set Env'
        shell: bash
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: '‚öôÔ∏è Printenv'
        shell: bash
        run: |
          echo "VERSION=${VERSION}"
          printenv

      - name: 'üöß Compile application'
        run: '& ..\build-systems\github\windows\build-zip.ps1'

#      - name: 'üì§ Upload artifact: Windows'
#        uses: actions/upload-artifact@v3
#        with:
#          name: QOwnNotes.zip
#          path: QOwnNotes.zip
#      - name: 'üì§ Upload artifact: Windows sha256sum'
#        uses: actions/upload-artifact@v3
#        with:
#          name: QOwnNotes.zip.sha256
#          path: QOwnNotes.zip.sha256

      - name: 'üì§ Release ZIP'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: QOwnNotes.zip
          asset_name: QOwnNotes.zip
          asset_content_type: application/zip
      - name: 'üì§ Release sha256 sum'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: QOwnNotes.zip.sha256
          asset_name: QOwnNotes.zip.sha256
          asset_content_type: text/plain


  #
  # macOS build
  #
  build-macos:
    name: 'üçé macOS Qt 5.15.2'
    needs: create_release
    runs-on: macos-latest
    env:
      QT_VERSION: 5.15.2
    steps:

      - name: 'üß∞ Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/
      - name: '‚öôÔ∏è Cache Qt'
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          modules: ${{env.QT_MODULES}}
          aqtversion: '==2.0.0'
          cache: ${{steps.cache-qt.outputs.cache-hit}}

      - name: '‚öôÔ∏è Set Env'
        shell: bash
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: '‚öôÔ∏è Printenv'
        shell: bash
        run: |
          echo "VERSION=${VERSION}"
          printenv

      - name: 'üöß Compile application'
        run: |
          echo "#define RELEASE \"GitHub Actions\"" > release.h
          lrelease QOwnNotes.pro
          #ls ${Qt5_Dir}/bin
          ${{env.QMAKE}}
          make -j ${{env.CORES}}
          ../build-systems/github/macos/create-dmg.sh

#      - name: 'üì§ Upload artifact: macOS'
#        uses: actions/upload-artifact@v3
#        with:
#          name: QOwnNotes.dmg
#          path: src/QOwnNotes.dmg

      - name: 'üì§ Release DMG'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: src/QOwnNotes.dmg
          asset_name: QOwnNotes.dmg
          asset_content_type: application/x-apple-diskimage

#  publish_release:
#    name: üì£ Publish release
#    runs-on: ubuntu-latest
#    needs: [create_release, build-appimage, build-windows, build-macos, build-snap]
#    steps:
#      - name: üì£ Publish draft release
#        uses: eregon/publish-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          release_id: ${{ needs.create_release.outputs.release_id }}
